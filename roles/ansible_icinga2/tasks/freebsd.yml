---
# does not setup the database
# currently only supports postgres
- name: Install needed packages
  package:
    name: "icinga2"
    state: present
- name: "Enable selected features"
  command: icinga2 feature enable {{ item }}
  loop: "{{ icinga2_enablefeature }}"
  notify: restart icinga2
- name: "setup api"
  command: icinga2 api setup
  when: '"api" in icinga2_enablefeature'
- name: "setup api users"
  template:
    src: "api-users.conf.j2"
    dest: "/usr/local/etc/icinga2/conf.d/api-users.conf"
  when: icinga2api_users is defined
  notify: restart icinga2
- name: "configure postgres connection parameters"
  template:
    src: ido-pgsql.conf.j2
    dest: "/usr/local/etc/icinga2/features-available/ido-pgsql.conf"
    owner: "icinga"
    group: "icinga"
    mode: 0644
  when: icinga2ido_dbtype == "postgres"
    #- name: setup icinga2 db connection credentials
    #  template:
    #    src: ido-mysql.conf.j2
    #    dest: /etc/icinga2/features-available/ido-mysql.conf
    #    owner: icinga
    #    group: icinga
    #    mode: 0644
    #  when: icinga2ido_dbtype == "mysql"
    #  notify: restart icinga2
- name: "deploy icinga2 zones.conf"
  template:
    src: zones.conf.j2
    dest: /usr/local/etc/icinga2/zones.conf
    owner: icinga
    group: icinga
  notify: restart icinga2
- name: "deploy icinga2 constants.conf"
  template:
    src: constants.conf.j2
    dest: /usr/local/etc/icinga2/constants.conf
    owner: icinga
    group: icinga
  notify: restart icinga2
- name: "deploy icinga2 icinga2.conf"
  template:
    src: icinga2.conf.j2
    dest: /usr/local/etc/icinga2/icinga2.conf
    owner: icinga
    group: icinga
  notify: restart icinga2
            #- name: check if schema is already there
            #  shell: mysql -s -N -P {{ icinga2ido_dbport }} -u {{ icinga2ido_dbuser }} -p{{ icinga2ido_dbpw }} -h {{ icinga2ido_dbhost }} information_schema -e "select count(*) as totals from TABLES WHERE TABLE_SCHEMA = '{{ icinga2ido_dbname  }}'"
            #  register: schemastatus
            #  #failed_when: schemastatus.stdout != 0
            #- name: import mysql schema
            #  mysql_db:
            #    name: "{{ icinga2ido_dbname }}"
            #    state: import
            #    target: /usr/share/icinga2-ido-mysql/schema/mysql.sql
            #    login_host: "{{ icinga2ido_dbhost }}"
            #    login_port: "{{ icinga2ido_dbport }}"
            #    login_user: "{{ icinga2ido_dbuser }}"
            #    login_password: "{{ icinga2ido_dbpw }}"
            #  when:
            #    - icinga2ido_importschema is true
            #    - icinga2ido_dbtype == "mysql"
            #    - schemastatus.stdout == "0"
    #- name: Setup group objects
    #  template:
    #    src: group.j2
    #    dest: "/etc/icinga2/zones.d/{{ icingadefaultzone }}/hostgroups.conf"
    #  when: icingagroups is defined
    #  notify: restart icinga2
    #- name: Setup templates
    #  template:
    #    src: templates.conf.j2
    #    dest: /etc/icinga2/zones.d/{{ icingadefaultzone }}/templates.conf
    #- name: Setup host objects
    #  template:
    #    src: host.j2
    #    dest: "/etc/icinga2/zones.d/{{ icingadefaultzone }}/hosts.conf"
    #  when: icingahosts is defined
    #  notify: restart icinga2
    #- name: Setup agent objects
    #  template:
    #    src: agent.j2
    #    dest: "/etc/icinga2/zones.d/{{ icingadefaultzone }}/agents.conf"
    #  notify: restart icinga2
    #- name: setup user file
    #  template:
    #    src: user.j2
    #    dest: "/etc/icinga2/zones.d/{{ icingadefaultzone }}/user.conf"
    #  when: icingausers is defined
- name: check is server certificate is there
  stat:
    path: /var/lib/icinga2/certs/{{ inventory_hostname }}.crt
  register: certificatecheck
- name: create master server certificate
  command: icinga2 pki new-cert --cn {{ inventory_hostname }} --key /var/lib/icinga2/certs/{{ inventory_hostname }}.key --csr /var/lib/icinga2/certs/{{ inventory_hostname }}.csr --cert /var/lib/icinga2/certs/{{ inventory_hostname }}.crt && icinga2 pki sign-csr --csr /var/lib/icinga2/certs/{{ inventory_hostname }}.csr --cert /var/lib/icinga2/certs/{{ inventory_hostname }}.crt
  when:
    - not certificatecheck.stat.exists
    - icinga2signingmaster == inventory_hostname
- name: enable icinga2 service
  service:
    name: icinga2
    state: started
    enabled: yes
